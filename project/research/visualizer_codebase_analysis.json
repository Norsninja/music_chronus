{
  "type": "codebase-researcher",
  "description": "Analyze Music Chronus engine for visualizer data sources",
  "prompt": "Analyze the Music Chronus codebase to understand data availability for a terminal visualizer:\n\n1. OSC Broadcasting System:\n   - How does the engine broadcast data? (check engine_pyo.py)\n   - What OSC routes are available for monitoring?\n   - Is there a /engine/status or similar route?\n   - How is data formatted in OSC messages?\n\n2. Audio Metering Implementation:\n   - Find all PeakAmp usage in the codebase\n   - How are voice levels currently measured?\n   - What's the update rate for meters?\n   - Are there any existing meter smoothing/decay algorithms?\n\n3. Sequencer Data Structures:\n   - How is pattern data stored? (check seq_module.py)\n   - What format are patterns in? (X, x, . notation)\n   - How can we access current playback position?\n   - Is there a way to get all active patterns at once?\n\n4. Data Export Points:\n   - Are there any existing monitoring hooks?\n   - Can we tap into the OSC server to mirror messages?\n   - Is there a status file or shared memory system?\n   - What's the best non-intrusive way to get real-time data?\n\n5. Existing Patterns:\n   - Find any existing visualization or monitoring code\n   - Check test files for data access patterns\n   - Look for debug/logging systems we could leverage\n\nPlease provide specific file paths and line numbers for all findings."
}