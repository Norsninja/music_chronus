{
  "agent": "technical-research-scout",
  "task": "Research terminal UI libraries and audio visualization techniques:\n\n1. TERMINAL UI LIBRARIES (Python):\n   - Compare: blessed, rich, curses, asciimatics, textual\n   - Windows compatibility (especially colored output)\n   - Performance characteristics\n   - Animation capabilities\n   - Box-drawing and special characters support\n\n2. AUDIO VISUALIZATION TECHNIQUES:\n   - Real-time spectrum analysis methods\n   - Level meter implementations\n   - Waveform visualization in ASCII\n   - Beat detection algorithms\n   - Pattern visualization approaches\n\n3. 8-BIT AESTHETICS:\n   - Classic terminal game graphics techniques\n   - ASCII art animation patterns\n   - Box-drawing character sets\n   - Color schemes (CGA, EGA palettes)\n   - Retro UI layouts and frames\n\n4. PERFORMANCE CONSIDERATIONS:\n   - Terminal refresh rates\n   - Efficient screen updates (dirty rectangles)\n   - Threading/async for OSC reception\n   - Memory-efficient circular buffers\n   - CPU usage optimization\n\n5. OSC CLIENT PATTERNS:\n   - Receive-only client best practices\n   - Message buffering strategies\n   - Async vs threaded reception\n   - Error handling and reconnection\n\n6. CROSS-PLATFORM ISSUES:\n   - Windows terminal limitations\n   - ANSI escape sequence support\n   - Unicode box-drawing compatibility\n   - Color support detection\n\nPlease include code examples and performance benchmarks where available.",
  "output_file": "project/research/visualizer_technical_research.md"
}