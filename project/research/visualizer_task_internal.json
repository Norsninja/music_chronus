{
  "agent": "codebase-researcher",
  "task": "Analyze the Music Chronus codebase for terminal visualizer integration:\n\n1. ENGINE ARCHITECTURE:\n   - How does engine_pyo.py work internally?\n   - What audio monitoring hooks are available?\n   - How to capture levels/amplitude without affecting performance?\n   - Current OSC message patterns and frequencies\n\n2. OSC PATTERNS:\n   - All OSC endpoints that emit status/monitoring data\n   - Message formats and data structures\n   - How to create a receive-only OSC client\n   - Existing monitoring implementations (if any)\n\n3. AUDIO DATA ACCESS:\n   - How voices generate audio\n   - Where amplitude/level data can be tapped\n   - Spectrum analysis possibilities in pyo\n   - Pattern/sequence state information\n\n4. EXISTING MONITORING:\n   - Current logging/monitoring systems\n   - Performance measurement code\n   - Status update mechanisms\n   - Any existing visualization attempts\n\n5. INTEGRATION POINTS:\n   - Best places to add OSC broadcast messages\n   - Non-invasive monitoring techniques\n   - How to get pattern/sequence data\n   - Voice state and parameter access\n\nPlease provide specific file paths and line numbers for all integration points.",
  "output_file": "project/research/visualizer_codebase_analysis.md"
}